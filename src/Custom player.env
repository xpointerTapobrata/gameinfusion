{/* 
      const [rates, setrates] = useState([
        {
            opt: 2,
            isActive: false

        },
        {
            opt: 1.5,
            isActive: false
        },
        {
            opt: 1,
            isActive: true
        },
        {
            opt: 0.25,
            isActive: false
        },
    ])


    useEffect(() => {
        if(volume=== 0){
            setshowVolume(false)
        }
        if(volume > 0){
            setshowVolume(true)
            if(muted){
                setmuted(!muted)
            }
        }
    }, [volume])



    const showControls = () => {
        setcontrolOpacity(true)
    }

    const hideControls = () => {
        setcontrolOpacity(false)
    }

    const showSpeeds = () => {
        setspeedsShow(!speedsShow)
    }



      const handleProgress = (changeState) => {
        setcurrentTime(changeState.played*100)    
    }
    
        const changeSpeed =(e) => {
        setspeed(e.target.id)
        rates.map(r => {
            return r.opt === parseFloat(e.target.id) ? r.isActive = true : r.isActive = false
        })
    }


    const handlePlay = () => {
        setshowPlay(!showPlay)
        setplaying(!playing)
    }

    const handleChange = (e) => {
        setprogress(e.target.value)
        console.log(e.target.value)
    }

    const toggleVolumeOff = () => {
        setmuted(true)
        setshowVolume(false)
        
    }

    const toggleVolumeOn = () => {
        setmuted(false)
        setshowVolume(true)
    }

    const changeVolume = (e) => {
        setvolume(e.target.value/100*1)
      
    }

      playbackRate={parseFloat(speed)} 

    <div className={controlOpacity ? "controls controlsOpacity" : "controls"} onMouseEnter={showControls} onMouseLeave={hideControls}>
                    <input type='range' className="progressComplete" min='0' max= '100' onChange={handleChange}></input>
                    <div className="coverForProgress">   
                    <input type='range' min='0' max = '100' defaultValue='0' className="progressBar" value= {currentTime} style = {{width : `${currentTime}%`}}></input>
                    </div>
                    <div className="icons">
                        <div className="lefticons">
                            <i onClick = {handlePlay} className= { showPlay ? "fas fa-play show" : "fas fa-play" } ></i>
                            <i onClick = {handlePlay} className= { !showPlay ? "fas fa-pause show" : "fas fa-pause" } ></i>
                            <i className = {showVolume ? 'fas fa-volume-up showVolume' : 'fas fa-volume-up'} onClick={toggleVolumeOff}></i>
                            <i className={!showVolume ? 'fas fa-volume-mute showVolume' : 'fas fa-volume-mute'} onClick={toggleVolumeOn}></i>
                            <div className='volumeContainer'><input type="range" min='0' max='100' className='volumeLine' defaultValue='0.5' onChange={changeVolume}/></div>
                            
                        </div>
                        <div className="righticons">
                        <i onClick={showSpeeds} class="fas fa-tachometer-alt"></i>
                        <div className={speedsShow ? "speeds speedsShow" : "speeds"}>
                            {
                                rates.map( rate => {
                                    return (
                                        <p className = {rate.isActive ? 'isActive' : ''} onClick={changeSpeed} id={rate.opt}>{rate.opt}</p>
                                    )
                                })
                            }
                        </div>
                        </div>
                    </div>
    </div>
*/}